// <auto-generated />
using System;
using Asp_Final.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Asp_Final.Migrations
{
    [DbContext(typeof(Final_Db))]
    [Migration("20190818194253_SeedDb")]
    partial class SeedDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Asp_Final.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lastname")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Asp_Final.Models.Automobile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("BanId");

                    b.Property<int>("CityId");

                    b.Property<int>("ColorId");

                    b.Property<int>("EnginePower");

                    b.Property<decimal>("EngineVolume");

                    b.Property<int>("FuelId");

                    b.Property<DateTime>("GraduationYear");

                    b.Property<bool>("IsNew");

                    b.Property<int>("Mileage");

                    b.Property<int>("ModelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl");

                    b.Property<decimal>("Price");

                    b.Property<int>("SpeedBoxId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BanId");

                    b.HasIndex("CityId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SpeedBoxId");

                    b.ToTable("Automobiles");

                    b.HasData(
                        new { Id = 5, BanId = 5, CityId = 8, ColorId = 9, EnginePower = 200, EngineVolume = 2400m, FuelId = 4, GraduationYear = new DateTime(2013, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), IsNew = false, Mileage = 25000, ModelId = 37, Name = "Kia Optima", PhotoUrl = "Kia.jpg", Price = 20000m, SpeedBoxId = 3 }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Bans");

                    b.HasData(
                        new { Id = 4, Name = "Hatchback" },
                        new { Id = 5, Name = "Sedan" },
                        new { Id = 6, Name = "Van" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.CarImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutomobileId");

                    b.Property<string>("CarPhotoUrl");

                    b.HasKey("Id");

                    b.HasIndex("AutomobileId");

                    b.ToTable("CarImages");

                    b.HasData(
                        new { Id = 20, AutomobileId = 5, CarPhotoUrl = "Kia1.jpg" },
                        new { Id = 21, AutomobileId = 5, CarPhotoUrl = "Kia2.jpg" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 7, Name = "Baku" },
                        new { Id = 8, Name = "Sumgayit" },
                        new { Id = 9, Name = "Barda" },
                        new { Id = 10, Name = "Gence" },
                        new { Id = 11, Name = "Semkir" },
                        new { Id = 12, Name = "Naxcivan" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 9, Name = "Black" },
                        new { Id = 10, Name = "White" },
                        new { Id = 11, Name = "Yellow" },
                        new { Id = 12, Name = "Gray" },
                        new { Id = 13, Name = "Brown" },
                        new { Id = 14, Name = "Red" },
                        new { Id = 15, Name = "Blue" },
                        new { Id = 16, Name = "Green" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasData(
                        new { Id = 4, Name = "Gasoline" },
                        new { Id = 5, Name = "Diesel" },
                        new { Id = 6, Name = "Hybrid" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Marks");

                    b.HasData(
                        new { Id = 8, Name = "Bmw" },
                        new { Id = 9, Name = "Mercedes" },
                        new { Id = 10, Name = "Audi" },
                        new { Id = 11, Name = "Kia" },
                        new { Id = 12, Name = "Hyundai" },
                        new { Id = 13, Name = "Chevrolet" },
                        new { Id = 14, Name = "Lada(VAZ)" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarkId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Models");

                    b.HasData(
                        new { Id = 26, MarkId = 8, Name = "530" },
                        new { Id = 27, MarkId = 8, Name = "X5" },
                        new { Id = 28, MarkId = 8, Name = "M6" },
                        new { Id = 29, MarkId = 9, Name = "C-220" },
                        new { Id = 30, MarkId = 9, Name = "E-220" },
                        new { Id = 31, MarkId = 9, Name = "XD-250" },
                        new { Id = 32, MarkId = 10, Name = "A4" },
                        new { Id = 33, MarkId = 10, Name = "A6" },
                        new { Id = 34, MarkId = 10, Name = "Q7" },
                        new { Id = 35, MarkId = 11, Name = "Cerato" },
                        new { Id = 36, MarkId = 11, Name = "Sorento" },
                        new { Id = 37, MarkId = 11, Name = "Optima" },
                        new { Id = 38, MarkId = 12, Name = "Elantra" },
                        new { Id = 39, MarkId = 12, Name = "Santa-fe" },
                        new { Id = 40, MarkId = 12, Name = "Accent" },
                        new { Id = 41, MarkId = 13, Name = "Aveo" },
                        new { Id = 42, MarkId = 13, Name = "Captiva" },
                        new { Id = 43, MarkId = 13, Name = "Cruze" },
                        new { Id = 45, MarkId = 14, Name = "2107" },
                        new { Id = 46, MarkId = 14, Name = "Niva" },
                        new { Id = 47, MarkId = 14, Name = "Prioa" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new { Id = 15, Info = "New Kia Soul Full Edition 2019", PhotoUrl = "KiaSoul.jpg", Title = "New Kia Soul 2019" },
                        new { Id = 16, Info = "New Ferrari  Full Sport Edition 2019", PhotoUrl = "Ferrari.jpg", Title = "New Ferrari SpeedCar 2019" }
                    );
                });

            modelBuilder.Entity("Asp_Final.Models.SpeedBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SpeedBoxes");

                    b.HasData(
                        new { Id = 3, Name = "Automatic" },
                        new { Id = 4, Name = "Mechanic" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Asp_Final.Models.Automobile", b =>
                {
                    b.HasOne("Asp_Final.Models.ApplicationUser", "User")
                        .WithMany("automobiles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Asp_Final.Models.Ban", "Ban")
                        .WithMany("automobiles")
                        .HasForeignKey("BanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.City", "City")
                        .WithMany("automobiles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.Color", "Color")
                        .WithMany("automobiles")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.Fuel", "Fuel")
                        .WithMany("automobiles")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.Model", "Model")
                        .WithMany("Automobiles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.SpeedBox", "SpeedBox")
                        .WithMany("automobiles")
                        .HasForeignKey("SpeedBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Asp_Final.Models.CarImages", b =>
                {
                    b.HasOne("Asp_Final.Models.Automobile", "Automobile")
                        .WithMany("CarImages")
                        .HasForeignKey("AutomobileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Asp_Final.Models.Model", b =>
                {
                    b.HasOne("Asp_Final.Models.Mark", "Mark")
                        .WithMany("Models")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Asp_Final.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Asp_Final.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Asp_Final.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Asp_Final.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
